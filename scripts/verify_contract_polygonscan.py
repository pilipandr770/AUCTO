# scripts/verify_contract_polygonscan.py
"""
–°—Ü–µ–Ω–∞—Ä—ñ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –Ω–∞ PolygonScan —á–µ—Ä–µ–∑ API Polygonscan
"""
import os
import time
import argparse
import requests
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env
load_dotenv()
API_KEY = os.getenv('POLYGONSCAN_API_KEY')
if not API_KEY:
    print('‚ùå –ü–æ–º–∏–ª–∫–∞: —É —Ñ–∞–π–ª—ñ .env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ POLYGONSCAN_API_KEY')
    exit(1)

# –ü–∞—Ä—Å–∏–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
parser = argparse.ArgumentParser(description='–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –Ω–∞ PolygonScan')
parser.add_argument('-a', '--address', required=True, help='–ê–¥—Ä–µ—Å–∞ –¥–µ–ø–ª–æ–π–Ω—É—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É')
parser.add_argument('-s', '--source', required=True, help='–®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ –≤–∏—Ö—ñ–¥–Ω–∏–º –∫–æ–¥–æ–º (.sol)')
parser.add_argument('-n', '--name', required=True, help='–Ü–º'—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É (–∑–∞–≥–æ–ª–æ–≤–æ–∫ —É —Ñ–∞–π–ª—ñ .sol, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, SimpleToken)')
parser.add_argument('-c', '--compiler', required=True, help='–í–µ—Ä—Å—ñ—è –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, v0.8.0+commit.c7dfd78e)')
parser.add_argument('-o', '--opt', type=int, choices=[0,1], default=1, help='–ß–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é (1 –∞–±–æ 0)')
parser.add_argument('-r', '--runs', type=int, default=200, help='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø—É—Å–∫—ñ–≤ –æ–ø—Ç–∏–º—ñ–∑–∞—Ç–æ—Ä–∞ (runs)')
parser.add_argument('-g', '--constructor-args', default='', help='–ê—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —É hex (–±–µ–∑ 0x)')
args = parser.parse_args()

# –ß–∏—Ç–∞—î–º–æ –≤–∏—Ö—ñ–¥–Ω–∏–π –∫–æ–¥
try:
    with open(args.source, 'r', encoding='utf-8') as f:
        source_code = f.read()
except FileNotFoundError:
    print(f'‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {args.source}')
    exit(1)

# –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∑–∞–ø–∏—Ç—É
payload = {
    'apikey': API_KEY,
    'module': 'contract',
    'action': 'verifysourcecode',
    'contractaddress': args.address,
    'sourceCode': source_code,
    'codeformat': 'solidity-single-file',
    'contractname': args.name,
    'compilerversion': args.compiler,
    'optimizationUsed': str(args.opt),
    'runs': str(args.runs),
    'constructorArguements': args.constructor_args
}

# –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
print('üîÑ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é...')
response = requests.post('https://api.polygonscan.com/api', data=payload)
data = response.json()
if data.get('status') != '1':
    print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:')
    print(data.get('result'))
    exit(1)

# GUID –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É
guid = data.get('result')
print(f'‚úÖ GUID –∑–∞–ø–∏—Ç—É: {guid}')

# –û–ø–∏—Ç—É—î–º–æ API –¥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
print('üîÑ –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...')
while True:
    time.sleep(5)
    status_resp = requests.get('https://api.polygonscan.com/api', params={
        'apikey': API_KEY,
        'module': 'contract',
        'action': 'checkverifystatus',
        'guid': guid
    })
    status_json = status_resp.json()
    if status_json.get('status') == '1':
        print('üéâ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —É—Å–ø—ñ—à–Ω–æ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ:')
        print(status_json.get('result'))
        exit(0)
    elif status_json.get('status') == '0':
        # –°—Ç–∞—Ç—É—Å 0 –º–æ–∂–µ –æ–∑–Ω–∞—á–∞—Ç–∏ —è–∫ "–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è", —Ç–∞–∫ —ñ –ø–æ–º–∏–ª–∫—É –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        res = status_json.get('result')
        if 'Pass - Verified' in res:
            print('üéâ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —É—Å–ø—ñ—à–Ω–æ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ:')
            exit(0)
        elif 'Fail - Unable to verify' in res:
            print('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–µ—Ä–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç:')
            print(res)
            exit(1)
        else:
            print('‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è...')
    else:
        print('‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:')
        print(status_json)
        exit(1)
